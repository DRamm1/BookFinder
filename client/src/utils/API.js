/**
 * It takes a token as an argument, and returns a fetch request to the /api/users/me endpoint, with the
 * token as the authorization header
 * @param token - The token that was generated by the server.
 * @returns The token is being returned.
 */
export const findToken = (token) => {
  return fetch("/api/users/me", {
    headers: {
      "Content-Type": "application/json",
      authorization: `Bearer ${token}`,
    },
  });
};

/**
 * It takes in a userData object, and sends it to the server to be stored in the database
 * @param userData - This is the data that we're sending to the server.
 * @returns A promise
 */
export const MakeAccount = (userData) => {
  return fetch("/api/users", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(userData),
  });
};

/**
 * It sends a POST request to the /api/users/login endpoint with the userData object as the body
 * @param userData - This is the data that we're sending to the server.
 * @returns A promise
 */
export const UserLogin = (userData) => {
  return fetch("/api/users/login", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(userData),
  });
};

/**
 * It takes in a bookData object and a token, and then it makes a PUT request to the /api/users route
 * with the bookData object and the token in the body of the request
 * @param bookData - This is the book data that we want to save.
 * @param token - The token that was returned from the login request.
 * @returns A promise
 */
export const BookSave = (bookData, token) => {
  return fetch("/api/users", {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
      authorization: `Bearer ${token}`,
    },
    body: JSON.stringify(bookData),
  });
};

/**
 * It takes a bookId and a token, and then it makes a DELETE request to the server, which deletes the
 * book from the database
 * @param bookId - The id of the book to delete
 * @param token - The token that was returned from the login or signup request.
 * @returns A promise.
 */
export const BookDelete = (bookId, token) => {
  return fetch(`/api/users/books/${bookId}`, {
    method: "DELETE",
    headers: {
      authorization: `Bearer ${token}`,
    },
  });
};

/**
 * It takes a query string as an argument, and returns a promise that resolves to a response object
 * @param query - The query string that you want to search for.
 * @returns A promise
 */
export const FindBooks = (query) => {
  return fetch(`${query}`);
};
